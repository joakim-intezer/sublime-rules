name: "Brand impersonation: DocuSign image attachment lure with no DocuSign links"
description: "Detects DocuSign phishing messages with no DocuSign links, a DocuSign logo attached, from an untrusted sender."
type: "rule"
severity: "high"
source: |
  type.inbound
  // all attachments are images
  and length(filter(attachments, .file_type not in $file_types_images)) == 0
  and (
    any(body.links,
    // the images are likely hyperlinked to a non docusign url
        .display_text is null
        and .display_url.url is null
        and not strings.ilike(.href_url.domain.root_domain, "docusign.*")
        and any(attachments,
                (
                  any(ml.logo_detect(.).brands,
                      .name == "DocuSign" and .confidence in ("medium", "high")
                  )
                  or any(file.explode(.),
                         strings.ilike(.scan.ocr.raw, "*DocuSign*")
                         and any(ml.nlu_classifier(.scan.ocr.raw).intents,
                                 .name == "cred_theft" and .confidence != "low"
                         )
                  )
                )
        )
    )
    or (
      length(filter(body.links,
                    strings.ilike(.href_url.domain.root_domain, "docusign.*")
  
                    // and not the only link is to support.docusign.com
                    and not strings.ilike(.href_url.url,
                                          "https://support.docusign.com/"
                    )
                    // and not the only link is directly to docusign.com with no path
                    and not strings.ilike(.href_url.url, "docusign.com")
             )
      ) == 0
      and any(file.explode(beta.message_screenshot()),
              strings.ilike(.scan.ocr.raw, "*DocuSign*")
              and any(ml.nlu_classifier(.scan.ocr.raw).intents,
                      .name == "cred_theft" and .confidence != "low"
              )
      )
    )
  )
  and (
    not profile.by_sender().solicited
    or (
      profile.by_sender().any_messages_malicious_or_spam
      and not profile.by_sender().any_false_positives
    )
  )
  and not profile.by_sender().any_false_positives
  
  // negate docusign 'via' messages
  and not (
    any(headers.hops,
        any(.fields,
            .name == "X-Api-Host" and strings.ends_with(.value, "docusign.net")
        )
    )
    and strings.contains(sender.display_name, "via")
  )
  
  // negate docusign originated emails
  and not any(headers.hops,
              regex.imatch(.received.server.raw, ".+.docusign.(net|com)")
  )

attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "Social engineering"
detection_methods:
  - "Computer Vision"
  - "Content analysis"
  - "Header analysis"
  - "Natural Language Understanding"
  - "Optical Character Recognition"
  - "Sender analysis"
  - "URL screenshot"
id: "814a5694-d626-5bf4-a1ba-a1dbcb625279"
