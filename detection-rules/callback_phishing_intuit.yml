name: "Callback phishing via Intuit service abuse"
description: "Callback phishing campaigns have been observed abusing Intuit Quickbooks services to send fraudulent invoices with callback phishing contents."
type: "rule"
severity: "medium"
source: "type.inbound\n\n// Legitimate Intuit sending infratructure\nand (\n  sender.email.domain.root_domain in ('intuit.com', 'intuit.co.uk')\n  // check for SPF or DMARC passed\n  and (headers.auth_summary.spf.pass or headers.auth_summary.dmarc.pass)\n)\n\n// Callback Phishing in body\nand (\n  (\n    length(attachments) == 0\n    and regex.icontains(body.current_thread.text,\n                        (\n                          \"mcafee|norton|geek.{0,5}squad|paypal|ebay|symantec|best buy|lifelock\"\n                        )\n    )\n    and 3 of (\n      strings.ilike(body.current_thread.text, '*purchase*'),\n      strings.ilike(body.current_thread.text, '*payment*'),\n      strings.ilike(body.current_thread.text, '*transaction*'),\n      strings.ilike(body.current_thread.text, '*subscription*'),\n      strings.ilike(body.current_thread.text, '*antivirus*'),\n      strings.ilike(body.current_thread.text, '*order*'),\n      strings.ilike(body.current_thread.text, '*support*'),\n      strings.ilike(body.current_thread.text, '*help line*'),\n      strings.ilike(body.current_thread.text, '*receipt*'),\n      strings.ilike(body.current_thread.text, '*invoice*'),\n      strings.ilike(body.current_thread.text, '*call*'),\n      strings.ilike(body.current_thread.text, '*cancel*'),\n      strings.ilike(body.current_thread.text, '*renew*'),\n      strings.ilike(body.current_thread.text, '*refund*')\n    )\n    // phone number regex\n    and any([body.current_thread.text, subject.subject],\n            regex.icontains(., '\\b\\+?(\\d{1}.)?\\(?\\d{3}?\\)?.\\d{3}.?\\d{4}\\b')\n    )\n  )\n  or \n  // all attachments are PDFs with callback phishing indicators \n  (\n    length(attachments) < 3\n    and all(attachments, .file_extension == \"pdf\")\n    // the attachment is a pdf with 1 page, and at least 60 ocr chars\n    and any(attachments,\n            (\n              .file_extension == \"pdf\"\n              and any(file.explode(.), .scan.exiftool.page_count < 3)\n              and any(file.explode(.), length(.scan.ocr.raw) > 60)\n            )\n\n            // 4 of the following strings are found        \n            and (\n              any(file.explode(.),\n                  4 of (\n                    strings.icontains(.scan.ocr.raw, \"purchase\"),\n                    strings.icontains(.scan.ocr.raw, \"payment\"),\n                    strings.icontains(.scan.ocr.raw, \"transaction\"),\n                    strings.icontains(.scan.ocr.raw, \"subscription\"),\n                    strings.icontains(.scan.ocr.raw, \"antivirus\"),\n                    strings.icontains(.scan.ocr.raw, \"order\"),\n                    strings.icontains(.scan.ocr.raw, \"support\"),\n                    strings.icontains(.scan.ocr.raw, \"help line\"),\n                    strings.icontains(.scan.ocr.raw, \"receipt\"),\n                    strings.icontains(.scan.ocr.raw, \"invoice\"),\n                    strings.icontains(.scan.ocr.raw, \"call\"),\n                    strings.icontains(.scan.ocr.raw, \"helpdesk\"),\n                    strings.icontains(.scan.ocr.raw, \"cancel\"),\n                    strings.icontains(.scan.ocr.raw, \"renew\"),\n                    strings.icontains(.scan.ocr.raw, \"refund\"),\n                    strings.icontains(.scan.ocr.raw, \"amount\"),\n                    strings.icontains(.scan.ocr.raw, \"crypto\"),\n                    strings.icontains(.scan.ocr.raw, \"wallet address\"),\n                    regex.icontains(.scan.ocr.raw, '\\$\\d{3}\\.\\d{2}\\b'),\n                    regex.icontains(.scan.ocr.raw,\n                                    '(\\+\\d|1.(\\()?\\d{3}(\\))?\\D\\d{3}\\D\\d{4})'\n                    ),\n                    regex.icontains(.scan.ocr.raw,\n                                    '\\+?(\\d{1,2})?\\s?\\(?\\d{3}\\)?[\\s\\.\\-⋅]{0,5}\\d{3}[\\s\\.\\-⋅]{0,5}\\d{4}'\n                    )\n                  )\n              )\n            )\n\n            // 1 of the following strings is found, representing common Callback brands          \n            and (\n              any(file.explode(.),\n                  1 of (\n                    strings.icontains(.scan.ocr.raw, \"geek squad\"),\n                    strings.icontains(.scan.ocr.raw, \"lifelock\"),\n                    strings.icontains(.scan.ocr.raw, \"best buy\"),\n                    strings.icontains(.scan.ocr.raw, \"mcafee\"),\n                    strings.icontains(.scan.ocr.raw, \"norton\"),\n                    strings.icontains(.scan.ocr.raw, \"ebay\"),\n                    strings.icontains(.scan.ocr.raw, \"paypal\"),\n                  )\n              )\n              or any(ml.logo_detect(.).brands,\n                     .name in (\"PayPal\", \"Norton\", \"GeekSquad\", \"Ebay\")\n              )\n            )\n            // Negate bank statements\n            and not (\n              any(file.explode(.),\n                  2 of (\n                    strings.icontains(.scan.ocr.raw, \"opening balance\"),\n                    strings.icontains(.scan.ocr.raw, \"closing balance\"),\n                    strings.icontains(.scan.ocr.raw, \"direct debit\"),\n                    strings.icontains(.scan.ocr.raw, \"interest\"),\n                    strings.icontains(.scan.ocr.raw, \"account balance\"),\n                  )\n              )\n            )\n    )\n  )\n)\n"
attack_types:
  - "Callback Phishing"
tactics_and_techniques:
  - "Evasion"
  - "Free email provider"
  - "Impersonation: Brand"
  - "Social engineering"
detection_methods:
  - "Computer Vision"
  - "Content analysis"
  - "Header analysis"
  - "Optical Character Recognition"
id: "f2fe1294-ca43-5290-84fd-02f8149c5de7"
testing_pr: 1699
testing_sha: 15198df82db2941af30b7f4f9d95cee5620ac134
