name: "VIP impersonation with invoicing request"
description: "This rule detects emails attempting to impersonate a VIP, it leverages NLU to determine if there is invoicing verbiage in the current thread, and requires request language."
type: "rule"
severity: "high"
source: "type.inbound\nand any($org_vips, strings.contains(sender.display_name, .display_name))\nand (\n  (\n    sender.email.domain.domain in $org_domains\n    // X-headers indicate external sender\n    and headers.x_authenticated_sender.email != sender.email.email\n    and headers.x_authenticated_domain.domain not in $org_domains\n  )\n  or sender.email.domain.domain not in $org_domains\n)\n\n// Invoice Language with a request\nand (\n  any(ml.nlu_classifier(body.current_thread.text).tags,\n      .name == \"invoice\"\n      and .confidence in (\"medium\", \"high\")\n      and any(ml.nlu_classifier(body.current_thread.text).entities,\n              .name == \"request\"\n      )\n  )\n)\n\n// and the reply to email address has never been contacted  \nand any(headers.reply_to, .email.email not in $recipient_emails)\n\n// negate highly trusted sender domains unless they fail DMARC authentication\nand (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n    and (\n      any(distinct(headers.hops, .authentication_results.dmarc is not null),\n          strings.ilike(.authentication_results.dmarc, \"*fail\")\n      )\n    )\n  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n)\n"
attack_types:
  - "BEC/Fraud"
tactics_and_techniques:
  - "Impersonation: VIP"
detection_methods:
  - "Content analysis"
  - "Header analysis"
  - "Natural Language Understanding"
id: "a60f89a0-6cd0-5c2d-96de-8800380df407"
testing_pr: 1287
testing_sha: 7abf4037113db0292be9fb3e9a1e12ac45a622eb
