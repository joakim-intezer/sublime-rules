name: "Brand Impersonation: DocuSign PDF with QR code with missing or broken logo"
description: "Detects PDF using DocuSign/Signature language, referencing or including a QR code from an Unsolicited sender. These messages often lead users to phishing sites or initiate unwanted downloads. "
type: "rule"
severity: "high"
source: "type.inbound\nand length(body.current_thread.text) < 1000\nand any([subject.subject, sender.display_name],\n        regex.icontains(., '\\bSign(ature)?\\b')\n)\nand any(attachments,\n        .file_type == \"pdf\"\n        // Broken or absent logo \n        and not any(ml.logo_detect(.).brands, .name is not null)\n        and (\n          any(file.explode(.),\n              strings.icontains(.scan.ocr.raw, 'Docusign')\n              and regex.icontains(.scan.ocr.raw, 'scan|camera')\n              and regex.icontains(.scan.ocr.raw, '\\bQR\\b|Q\\.R\\.|barcode')\n              and .scan.exiftool.page_count == 1\n          )\n          or (\n            any(file.explode(.),\n                (\n                  strings.icontains(.scan.ocr.raw, 'Docusign')\n                  and .scan.qr.type is not null\n                  and regex.contains(.scan.qr.data, '\\.')\n                  and .scan.exiftool.page_count == 1\n                )\n                or (\n                  any(file.explode(beta.message_screenshot()),\n                      .scan.exiftool.image_height < 2000\n                      and .scan.exiftool.image_width < 2000\n                      and .scan.qr.type is not null\n                      and regex.contains(.scan.qr.data, '\\.')\n                      and strings.icontains(.scan.ocr.raw, 'Docusign')\n                  )\n                )\n            )\n          )\n        )\n)\nand (\n  not profile.by_sender().solicited\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n    and not profile.by_sender().any_false_positives\n  )\n)\nand not profile.by_sender().any_false_positives\n\n// negate highly trusted sender domains unless they fail DMARC authentication\nand (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n    and (\n      any(distinct(headers.hops, .authentication_results.dmarc is not null),\n          strings.ilike(.authentication_results.dmarc, \"*fail\")\n      )\n    )\n  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n)\n"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "PDF"
  - "QR code"
  - "Social engineering"
detection_methods:
  - "Computer Vision"
  - "Content analysis"
  - "QR code analysis"
  - "Sender analysis"
id: "fb51163d-b6fa-5c37-b849-091ade7c00bd"
testing_pr: 1536
testing_sha: 83aff7fa33b353d940ca01177d23590831355ceb
